#define squeeze_size_implementation(window_bits, dictionary_bits) (             \
    sizeof(squeeze_type) +                                                      \
    sizeof(map_entry_t) * (uint64_t)(1U << dictionary_bits) +                   \
    /* dic_nodes: */                                                            \
    sizeof(huffman_node_type) * ((uint64_t)(1U << dictionary_bits) * 2 - 1) +   \
    /* sym_nodes: */                                                            \
    sizeof(huffman_node_type) * (256 * 2 - 1) +                                 \
    /* pos_nodes: */                                                            \
    sizeof(huffman_node_type) * ((uint64_t)(1U << window_bits) * 2 - 1) +       \
    /* len_nodes: */                                                            \
    sizeof(huffman_node_type) * (256 * 2 - 1)                                   \
) // in C++ it could be constexpr function.

#define squeeze_sizeof(window_bits, dictionary_bits) (                          \
    sizeof(size_t) == sizeof(uint64_t) &&                                       \
    10 <= (window_bits) && (window_bits) <= 20 &&                               \
    8 <= (dictionary_bits) && (dictionary_bits) <= 20 ?                         \
    (size_t)squeeze_size_implementation((window_bits), (dictionary_bits)) : 0   \
) // in C++ it could be constexpr function.
